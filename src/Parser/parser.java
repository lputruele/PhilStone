
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 21 18:00:51 ART 2017
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import net.sf.javabdd.*;
import java.util.*;

import FormulaSpec.*;
import Spec.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 21 18:00:51 ART 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\034\003\000\002\026" +
    "\014\000\002\026\012\000\002\026\010\000\002\026\006" +
    "\000\002\025\003\000\002\025\005\000\002\024\005\000" +
    "\002\023\003\000\002\023\004\000\002\017\007\000\002" +
    "\017\012\000\002\017\010\000\002\017\005\000\002\021" +
    "\003\000\002\021\005\000\002\022\005\000\002\020\013" +
    "\000\002\020\011\000\002\043\003\000\002\043\004\000" +
    "\002\042\020\000\002\042\014\000\002\013\005\000\002" +
    "\014\003\000\002\014\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\033\003\000\002\033\003" +
    "\000\002\036\005\000\002\037\005\000\002\040\003\000" +
    "\002\040\005\000\002\041\005\000\002\003\003\000\002" +
    "\004\003\000\002\004\005\000\002\005\003\000\002\005" +
    "\005\000\002\007\003\000\002\007\005\000\002\006\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\005\000\002" +
    "\012\003\000\002\012\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\005" +
    "\000\002\002\010\000\002\002\010\000\002\002\005\000" +
    "\002\002\003\000\002\035\002\000\002\035\007\000\002" +
    "\035\007\000\002\035\010\000\002\035\010\000\002\035" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\010" +
    "\000\002\035\010\000\002\035\007\000\002\031\010\000" +
    "\002\032\004\000\002\030\003\000\002\030\005\000\002" +
    "\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\324\001\002\000\004\056\007\001\002" +
    "\000\006\030\013\056\010\001\002\000\012\015\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\001\002\000\004\017\ufffb\001\002" +
    "\000\006\020\322\021\033\001\002\000\004\056\207\001" +
    "\002\000\004\017\177\001\002\000\006\030\ufff8\032\ufff8" +
    "\001\002\000\006\030\013\032\020\001\002\000\006\002" +
    "\ufffc\063\040\001\002\000\004\011\022\001\002\000\006" +
    "\030\ufff7\032\ufff7\001\002\000\004\012\023\001\002\000" +
    "\004\015\024\001\002\000\004\056\010\001\002\000\004" +
    "\016\037\001\002\000\004\017\uffb6\001\002\000\006\020" +
    "\034\021\033\001\002\000\004\017\031\001\002\000\006" +
    "\016\uffb7\056\010\001\002\000\004\017\uffb5\001\002\000" +
    "\004\056\036\001\002\000\004\056\035\001\002\000\004" +
    "\017\uffb4\001\002\000\012\015\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\001\002\000\006\002\uffb8\063\uffb8\001\002\000\004" +
    "\020\041\001\002\000\010\017\uffc3\040\044\041\043\001" +
    "\002\000\004\017\176\001\002\000\012\013\154\042\155" +
    "\043\153\052\152\001\002\000\012\013\047\042\050\043" +
    "\046\052\045\001\002\000\004\013\147\001\002\000\004" +
    "\013\144\001\002\000\052\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\062\022\uffc3\023\uffc3\033\071\037\053\040\044" +
    "\041\043\044\uffc3\045\uffc3\050\uffc3\053\073\054\060\055" +
    "\067\056\061\061\055\062\066\001\002\000\004\013\051" +
    "\001\002\000\050\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\062\014\uffc3\022\uffc3\023\uffc3\033\071\037\053\040\044" +
    "\041\043\050\uffc3\053\073\054\060\055\067\056\061\061" +
    "\055\062\066\001\002\000\004\014\134\001\002\000\060" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\062\012\uffc3\014" +
    "\uffc3\017\uffc3\022\uffc3\023\uffc3\033\071\037\053\040\044" +
    "\041\043\044\uffc3\045\uffc3\050\uffc3\053\073\054\060\055" +
    "\067\056\061\061\055\062\066\001\002\000\020\012\uffdb" +
    "\014\uffdb\017\uffdb\022\uffdb\023\077\044\uffdb\045\uffdb\001" +
    "\002\000\004\011\126\001\002\000\026\005\122\006\123" +
    "\012\uffd5\014\uffd5\017\uffd5\022\uffd5\023\uffd5\044\uffd5\045" +
    "\uffd5\050\uffd5\001\002\000\022\012\uffd7\014\uffd7\017\uffd7" +
    "\022\uffd7\023\uffd7\044\uffd7\045\uffd7\050\120\001\002\000" +
    "\032\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\014\uffcb" +
    "\017\uffcb\022\uffcb\023\uffcb\044\uffcb\045\uffcb\050\uffcb\001" +
    "\002\000\004\064\116\001\002\000\050\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\062\012\uffc3\022\uffc3\023\uffc3\033" +
    "\071\037\053\040\044\041\043\050\uffc3\053\073\054\060" +
    "\055\067\056\061\061\055\062\066\001\002\000\032\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\014\uffd1\017\uffd1" +
    "\022\uffd1\023\uffd1\044\uffd1\045\uffd1\050\uffd1\001\002\000" +
    "\032\005\uffd4\006\uffd4\007\111\010\110\012\uffd4\014\uffd4" +
    "\017\uffd4\022\uffd4\023\uffd4\044\uffd4\045\uffd4\050\uffd4\001" +
    "\002\000\032\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4" +
    "\014\uffc4\017\uffc4\022\uffc4\023\uffc4\044\uffc4\045\uffc4\050" +
    "\uffc4\001\002\000\004\011\103\001\002\000\032\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\012\uffca\014\uffca\017\uffca\022" +
    "\uffca\023\uffca\044\uffca\045\uffca\050\uffca\001\002\000\032" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\014\uffce\017" +
    "\uffce\022\uffce\023\uffce\044\uffce\045\uffce\050\uffce\001\002" +
    "\000\004\064\101\001\002\000\016\012\uffdc\014\uffdc\017" +
    "\uffdc\022\075\044\uffdc\045\uffdc\001\002\000\032\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\012\uffcc\014\uffcc\017\uffcc\022" +
    "\uffcc\023\uffcc\044\uffcc\045\uffcc\050\uffcc\001\002\000\020" +
    "\012\uffd9\014\uffd9\017\uffd9\022\uffd9\023\uffd9\044\uffd9\045" +
    "\uffd9\001\002\000\060\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\062\012\uffc3\014\uffc3\017\uffc3\022\uffc3\023\uffc3\033" +
    "\071\037\053\040\044\041\043\044\uffc3\045\uffc3\050\uffc3" +
    "\053\073\054\060\055\067\056\061\061\055\062\066\001" +
    "\002\000\020\012\uffda\014\uffda\017\uffda\022\uffda\023\077" +
    "\044\uffda\045\uffda\001\002\000\060\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\062\012\uffc3\014\uffc3\017\uffc3\022\uffc3" +
    "\023\uffc3\033\071\037\053\040\044\041\043\044\uffc3\045" +
    "\uffc3\050\uffc3\053\073\054\060\055\067\056\061\061\055" +
    "\062\066\001\002\000\020\012\uffd8\014\uffd8\017\uffd8\022" +
    "\uffd8\023\uffd8\044\uffd8\045\uffd8\001\002\000\004\056\102" +
    "\001\002\000\032\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012" +
    "\uffc8\014\uffc8\017\uffc8\022\uffc8\023\uffc8\044\uffc8\045\uffc8" +
    "\050\uffc8\001\002\000\004\033\104\001\002\000\004\064" +
    "\105\001\002\000\004\056\106\001\002\000\004\012\107" +
    "\001\002\000\032\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012" +
    "\uffc6\014\uffc6\017\uffc6\022\uffc6\023\uffc6\044\uffc6\045\uffc6" +
    "\050\uffc6\001\002\000\060\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\062\012\uffc3\014\uffc3\017\uffc3\022\uffc3\023\uffc3" +
    "\033\071\037\053\040\044\041\043\044\uffc3\045\uffc3\050" +
    "\uffc3\053\073\054\060\055\067\056\061\061\055\062\066" +
    "\001\002\000\060\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\062\012\uffc3\014\uffc3\017\uffc3\022\uffc3\023\uffc3\033\071" +
    "\037\053\040\044\041\043\044\uffc3\045\uffc3\050\uffc3\053" +
    "\073\054\060\055\067\056\061\061\055\062\066\001\002" +
    "\000\032\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\014" +
    "\uffd0\017\uffd0\022\uffd0\023\uffd0\044\uffd0\045\uffd0\050\uffd0" +
    "\001\002\000\032\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012" +
    "\uffcf\014\uffcf\017\uffcf\022\uffcf\023\uffcf\044\uffcf\045\uffcf" +
    "\050\uffcf\001\002\000\004\012\115\001\002\000\032\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\014\uffc5\017\uffc5" +
    "\022\uffc5\023\uffc5\044\uffc5\045\uffc5\050\uffc5\001\002\000" +
    "\004\056\117\001\002\000\032\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\012\uffc9\014\uffc9\017\uffc9\022\uffc9\023\uffc9\044" +
    "\uffc9\045\uffc9\050\uffc9\001\002\000\056\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\062\012\uffc3\014\uffc3\017\uffc3\022" +
    "\uffc3\023\uffc3\033\071\037\053\040\044\041\043\044\uffc3" +
    "\045\uffc3\053\073\054\060\055\067\056\061\061\055\062" +
    "\066\001\002\000\020\012\uffd6\014\uffd6\017\uffd6\022\uffd6" +
    "\023\uffd6\044\uffd6\045\uffd6\001\002\000\060\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\062\012\uffc3\014\uffc3\017\uffc3" +
    "\022\uffc3\023\uffc3\033\071\037\053\040\044\041\043\044" +
    "\uffc3\045\uffc3\050\uffc3\053\073\054\060\055\067\056\061" +
    "\061\055\062\066\001\002\000\060\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\062\012\uffc3\014\uffc3\017\uffc3\022\uffc3" +
    "\023\uffc3\033\071\037\053\040\044\041\043\044\uffc3\045" +
    "\uffc3\050\uffc3\053\073\054\060\055\067\056\061\061\055" +
    "\062\066\001\002\000\032\005\uffd2\006\uffd2\007\111\010" +
    "\110\012\uffd2\014\uffd2\017\uffd2\022\uffd2\023\uffd2\044\uffd2" +
    "\045\uffd2\050\uffd2\001\002\000\032\005\uffd3\006\uffd3\007" +
    "\111\010\110\012\uffd3\014\uffd3\017\uffd3\022\uffd3\023\uffd3" +
    "\044\uffd3\045\uffd3\050\uffd3\001\002\000\004\033\127\001" +
    "\002\000\004\064\130\001\002\000\004\056\131\001\002" +
    "\000\004\012\132\001\002\000\032\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\012\uffc7\014\uffc7\017\uffc7\022\uffc7\023\uffc7" +
    "\044\uffc7\045\uffc7\050\uffc7\001\002\000\032\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\012\uffcd\014\uffcd\017\uffcd\022\uffcd" +
    "\023\uffcd\044\uffcd\045\uffcd\050\uffcd\001\002\000\032\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\014\uffbd\017\uffbd" +
    "\022\uffbd\023\uffbd\044\uffbd\045\uffbd\050\uffbd\001\002\000" +
    "\006\044\137\045\136\001\002\000\050\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\062\014\uffc3\022\uffc3\023\uffc3\033" +
    "\071\037\053\040\044\041\043\050\uffc3\053\073\054\060" +
    "\055\067\056\061\061\055\062\066\001\002\000\050\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\062\014\uffc3\022\uffc3" +
    "\023\uffc3\033\071\037\053\040\044\041\043\050\uffc3\053" +
    "\073\054\060\055\067\056\061\061\055\062\066\001\002" +
    "\000\004\014\141\001\002\000\032\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\012\uffbb\014\uffbb\017\uffbb\022\uffbb\023\uffbb" +
    "\044\uffbb\045\uffbb\050\uffbb\001\002\000\004\014\143\001" +
    "\002\000\032\005\uffba\006\uffba\007\uffba\010\uffba\012\uffba" +
    "\014\uffba\017\uffba\022\uffba\023\uffba\044\uffba\045\uffba\050" +
    "\uffba\001\002\000\050\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\062\014\uffc3\022\uffc3\023\uffc3\033\071\037\053\040" +
    "\044\041\043\050\uffc3\053\073\054\060\055\067\056\061" +
    "\061\055\062\066\001\002\000\004\014\146\001\002\000" +
    "\032\005\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\014\uffb9" +
    "\017\uffb9\022\uffb9\023\uffb9\044\uffb9\045\uffb9\050\uffb9\001" +
    "\002\000\050\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\062" +
    "\014\uffc3\022\uffc3\023\uffc3\033\071\037\053\040\044\041" +
    "\043\050\uffc3\053\073\054\060\055\067\056\061\061\055" +
    "\062\066\001\002\000\004\014\151\001\002\000\032\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc\014\uffbc\017\uffbc" +
    "\022\uffbc\023\uffbc\044\uffbc\045\uffbc\050\uffbc\001\002\000" +
    "\004\013\173\001\002\000\004\013\170\001\002\000\052" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\062\022\uffc3\023" +
    "\uffc3\033\071\037\053\040\044\041\043\044\uffc3\045\uffc3" +
    "\050\uffc3\053\073\054\060\055\067\056\061\061\055\062" +
    "\066\001\002\000\004\013\156\001\002\000\050\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\062\014\uffc3\022\uffc3\023" +
    "\uffc3\033\071\037\053\040\044\041\043\050\uffc3\053\073" +
    "\054\060\055\067\056\061\061\055\062\066\001\002\000" +
    "\004\014\160\001\002\000\032\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\012\uffc2\014\uffc2\017\uffc2\022\uffc2\023\uffc2\044" +
    "\uffc2\045\uffc2\050\uffc2\001\002\000\006\044\163\045\162" +
    "\001\002\000\010\014\uffc3\040\044\041\043\001\002\000" +
    "\050\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\062\014\uffc3" +
    "\022\uffc3\023\uffc3\033\071\037\053\040\044\041\043\050" +
    "\uffc3\053\073\054\060\055\067\056\061\061\055\062\066" +
    "\001\002\000\004\014\165\001\002\000\032\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\012\uffc0\014\uffc0\017\uffc0\022\uffc0" +
    "\023\uffc0\044\uffc0\045\uffc0\050\uffc0\001\002\000\004\014" +
    "\167\001\002\000\032\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\012\uffbf\014\uffbf\017\uffbf\022\uffbf\023\uffbf\044\uffbf\045" +
    "\uffbf\050\uffbf\001\002\000\050\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\062\014\uffc3\022\uffc3\023\uffc3\033\071\037" +
    "\053\040\044\041\043\050\uffc3\053\073\054\060\055\067" +
    "\056\061\061\055\062\066\001\002\000\004\014\172\001" +
    "\002\000\032\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe" +
    "\014\uffbe\017\uffbe\022\uffbe\023\uffbe\044\uffbe\045\uffbe\050" +
    "\uffbe\001\002\000\050\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\062\014\uffc3\022\uffc3\023\uffc3\033\071\037\053\040" +
    "\044\041\043\050\uffc3\053\073\054\060\055\067\056\061" +
    "\061\055\062\066\001\002\000\004\014\175\001\002\000" +
    "\032\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\014\uffc1" +
    "\017\uffc1\022\uffc1\023\uffc1\044\uffc1\045\uffc1\050\uffc1\001" +
    "\002\000\004\002\ufffe\001\002\000\006\030\013\056\010" +
    "\001\002\000\004\017\ufffa\001\002\000\006\030\013\032" +
    "\020\001\002\000\006\002\ufffd\063\203\001\002\000\004" +
    "\020\204\001\002\000\050\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\062\017\uffc3\022\uffc3\023\uffc3\033\071\037\053" +
    "\040\044\041\043\050\uffc3\053\073\054\060\055\067\056" +
    "\061\061\055\062\066\001\002\000\004\017\206\001\002" +
    "\000\004\002\uffff\001\002\000\010\011\213\015\211\031" +
    "\212\001\002\000\006\030\ufff3\032\ufff3\001\002\000\006" +
    "\027\236\056\010\001\002\000\004\056\010\001\002\000" +
    "\004\056\214\001\002\000\004\020\226\001\002\000\006" +
    "\012\220\021\217\001\002\000\006\012\ufff2\021\ufff2\001" +
    "\002\000\004\056\214\001\002\000\006\015\211\031\222" +
    "\001\002\000\006\030\ufff4\032\ufff4\001\002\000\004\056" +
    "\010\001\002\000\006\015\211\021\033\001\002\000\006" +
    "\030\ufff5\032\ufff5\001\002\000\006\012\ufff1\021\ufff1\001" +
    "\002\000\006\025\231\026\230\001\002\000\006\012\ufff0" +
    "\021\ufff0\001\002\000\010\012\uffe2\017\uffe2\021\uffe2\001" +
    "\002\000\010\012\uffe3\017\uffe3\021\uffe3\001\002\000\006" +
    "\015\211\021\033\001\002\000\006\030\ufff6\032\ufff6\001" +
    "\002\000\004\017\312\001\002\000\004\017\uffe8\001\002" +
    "\000\004\020\310\001\002\000\006\020\306\021\033\001" +
    "\002\000\004\017\241\001\002\000\004\057\243\001\002" +
    "\000\006\036\uffed\057\uffed\001\002\000\004\056\256\001" +
    "\002\000\006\036\250\057\243\001\002\000\004\017\uffdf" +
    "\001\002\000\006\036\uffec\057\uffec\001\002\000\004\017" +
    "\253\001\002\000\004\020\251\001\002\000\050\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\062\017\uffc3\022\uffc3\023" +
    "\uffc3\033\071\037\053\040\044\041\043\050\uffc3\053\073" +
    "\054\060\055\067\056\061\061\055\062\066\001\002\000" +
    "\004\017\uffdd\001\002\000\006\016\255\036\250\001\002" +
    "\000\004\017\uffde\001\002\000\006\030\uffee\032\uffee\001" +
    "\002\000\004\011\257\001\002\000\004\012\260\001\002" +
    "\000\004\015\261\001\002\000\006\034\263\060\264\001" +
    "\002\000\004\017\302\001\002\000\004\020\300\001\002" +
    "\000\004\020\265\001\002\000\004\056\010\001\002\000" +
    "\006\017\267\021\033\001\002\000\004\034\263\001\002" +
    "\000\004\017\271\001\002\000\004\035\273\001\002\000" +
    "\004\017\276\001\002\000\004\020\274\001\002\000\050" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\062\017\uffc3\022" +
    "\uffc3\023\uffc3\033\071\037\053\040\044\041\043\050\uffc3" +
    "\053\073\054\060\055\067\056\061\061\055\062\066\001" +
    "\002\000\004\017\uffe0\001\002\000\004\016\277\001\002" +
    "\000\006\036\uffeb\057\uffeb\001\002\000\050\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\062\017\uffc3\022\uffc3\023\uffc3" +
    "\033\071\037\053\040\044\041\043\050\uffc3\053\073\054" +
    "\060\055\067\056\061\061\055\062\066\001\002\000\004" +
    "\017\uffe1\001\002\000\004\035\273\001\002\000\004\017" +
    "\304\001\002\000\004\016\305\001\002\000\006\036\uffea" +
    "\057\uffea\001\002\000\006\025\231\026\230\001\002\000" +
    "\004\017\uffe6\001\002\000\050\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\062\017\uffc3\022\uffc3\023\uffc3\033\071\037" +
    "\053\040\044\041\043\050\uffc3\053\073\054\060\055\067" +
    "\056\061\061\055\062\066\001\002\000\004\017\uffe9\001" +
    "\002\000\006\027\236\056\010\001\002\000\004\017\uffe7" +
    "\001\002\000\004\017\315\001\002\000\004\057\243\001" +
    "\002\000\006\036\250\057\243\001\002\000\004\017\320" +
    "\001\002\000\006\016\321\036\250\001\002\000\006\030" +
    "\uffef\032\uffef\001\002\000\006\025\231\026\230\001\002" +
    "\000\004\017\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\026\003\034\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\011" +
    "\017\014\023\015\024\010\025\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\020\031" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\026\027\025\030\027\032\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\026\027\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\067" +
    "\003\134\004\071\005\053\006\056\007\073\010\055\011" +
    "\063\012\062\035\064\001\001\000\002\001\001\000\026" +
    "\002\067\003\051\004\071\005\053\006\056\007\073\010" +
    "\055\011\063\012\062\035\064\001\001\000\002\001\001" +
    "\000\010\002\067\012\132\035\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\067\003" +
    "\113\004\071\005\053\006\056\007\073\010\055\011\063" +
    "\012\062\035\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\067\005\075" +
    "\006\056\007\073\010\055\011\063\012\062\035\064\001" +
    "\001\000\002\001\001\000\020\002\067\006\056\007\077" +
    "\010\055\011\063\012\062\035\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\067\012\112\035\064\001\001" +
    "\000\010\002\067\012\111\035\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\067\006" +
    "\120\010\055\011\063\012\062\035\064\001\001\000\002" +
    "\001\001\000\012\002\067\011\124\012\062\035\064\001" +
    "\001\000\012\002\067\011\123\012\062\035\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\067\003\141\004\071\005\053\006\056" +
    "\007\073\010\055\011\063\012\062\035\064\001\001\000" +
    "\026\002\067\003\137\004\071\005\053\006\056\007\073" +
    "\010\055\011\063\012\062\035\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\067\003\144\004\071\005\053\006\056\007" +
    "\073\010\055\011\063\012\062\035\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\067\003\147\004" +
    "\071\005\053\006\056\007\073\010\055\011\063\012\062" +
    "\035\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\067\003\160" +
    "\004\071\005\053\006\056\007\073\010\055\011\063\012" +
    "\062\035\064\001\001\000\002\001\001\000\026\002\067" +
    "\003\156\004\071\005\053\006\056\007\073\010\055\011" +
    "\063\012\062\035\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\165\001\001\000" +
    "\026\002\067\003\163\004\071\005\053\006\056\007\073" +
    "\010\055\011\063\012\062\035\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\067\003\170\004\071\005\053\006\056\007" +
    "\073\010\055\011\063\012\062\035\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\067\003\173\004" +
    "\071\005\053\006\056\007\073\010\055\011\063\012\062" +
    "\035\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\011\017\014\023\200\024\177" +
    "\001\001\000\002\001\001\000\006\017\020\031\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\067" +
    "\003\204\004\071\005\053\006\056\007\073\010\055\011" +
    "\063\012\062\035\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\207\001\001\000\002\001\001\000" +
    "\012\013\237\014\233\015\234\016\236\001\001\000\004" +
    "\016\231\001\001\000\006\021\214\022\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\224\001\001\000\004\020\220\001\001\000\002\001" +
    "\001\000\004\016\222\001\001\000\004\020\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\241\043\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\246\041\244" +
    "\042\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\067\003\251" +
    "\004\071\005\053\006\056\007\073\010\055\011\063\012" +
    "\062\035\064\001\001\000\002\001\001\000\004\041\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\265\001\001\000\002\001\001\000\004" +
    "\036\267\001\001\000\002\001\001\000\004\037\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\067" +
    "\003\274\004\071\005\053\006\056\007\073\010\055\011" +
    "\063\012\062\035\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\067\003\300\004" +
    "\071\005\053\006\056\007\073\010\055\011\063\012\062" +
    "\035\064\001\001\000\002\001\001\000\004\037\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\306\001\001\000\002\001\001\000\026\002" +
    "\067\003\310\004\071\005\053\006\056\007\073\010\055" +
    "\011\063\012\062\035\064\001\001\000\002\001\001\000" +
    "\010\013\313\015\312\016\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\241\043\315\001\001\000" +
    "\010\040\316\041\244\042\245\001\001\000\002\001\001" +
    "\000\004\041\253\001\001\000\002\001\001\000\004\033" +
    "\322\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         //System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    	report_fatal_error("", null);
	}                          	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // proc ::= varDecls COLON ID 
            {
              HashMap<String,String> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typeProc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												HashMap<String,String> processes = new HashMap<String,String>();
												for (int i=0; i<listNames.size(); i++){
													if (processes.containsKey(listNames.get(i)))
														parser.report_error("Duplicated instance declaration, line: "+listNamesleft, listNames);
													else
														processes.put(listNames.get(i), typeProc);
												}
												RESULT = processes;
                                          	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // processDecl ::= processDecl SEMICOLON proc 
            {
              HashMap<String,String> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,String> listProcess = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> lp = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
															Set<String> processes = lp.keySet();
															Iterator<String> iterator = processes.iterator();
															while (iterator.hasNext()){
																String currentProcess = iterator.next();
																if (listProcess.containsKey(currentProcess))
																	parser.report_error("Duplicated instance declaration, line: "+lpleft, lp);
																else
																	listProcess.put(currentProcess,lp.get(currentProcess));
															}
															RESULT = listProcess;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // processDecl ::= proc 
            {
              HashMap<String,String> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> lp = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
						  RESULT = lp;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // body ::= processDecl SEMICOLON 
            {
              HashMap<String,String> RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,String> declList = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											RESULT = declList;
										 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              HashMap<String,String> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,String> dec = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
														RESULT = dec;
													  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // temporalFormula ::= FORALL FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AF, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // temporalFormula ::= FORALL LBRACKET expr WEAKUNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AW, p, q, pleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // temporalFormula ::= FORALL LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AU, p, q, pleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // temporalFormula ::= FORALL GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AG, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // temporalFormula ::= FORALL NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AX, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // temporalFormula ::= EXIST FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EF, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // temporalFormula ::= EXIST LBRACKET expr WEAKUNTIL temporalFormula RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EW, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // temporalFormula ::= EXIST LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EU, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // temporalFormula ::= EXIST GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EG, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // temporalFormula ::= EXIST NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EX, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // temporalFormula ::= 
            {
              ExprAux RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primary ::= temporalFormula 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = f;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primary ::= LPARENT expr RPARENT 
            {
              ExprAux RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux ex = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primary ::= OWN LPARENT GLOBAL DOT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													ExprAux v = new ExprAux("global."+id, idleft);
													v.setOwner("global");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
												 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary ::= AV LPARENT GLOBAL DOT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
													ExprAux v = new ExprAux("global."+id, idleft);
													v.setOwner("global");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.AV, v, null, idleft); 
												
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= GLOBAL DOT ID 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExprAux v = new ExprAux("global."+id, idleft);
									v.setOwner("global"); // we set the owner could be this, global or any other process
									v.setUnqualifiedName(id);
									RESULT = v;
			     				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primary ::= ID DOT ID 
            {
              ExprAux RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String owner = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExprAux v = new ExprAux(owner+"."+id, idleft);
									v.setOwner(owner); // we set the owner could be this, global or any other process
									v.setUnqualifiedName(id);
									RESULT = v;
			     				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary ::= FALSE 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
					ExprAux c = new ExprAux(false, fleft);
					RESULT = c;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // primary ::= TRUE 
            {
              ExprAux RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					ExprAux c = new ExprAux(true, tleft);
					RESULT = c;	
				  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primary ::= INTEGER 
            {
              ExprAux RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExprAux c = new ExprAux(v, vleft);
						  RESULT = c;
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= NEG factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.NOT, f, null, fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= primary 
            {
              ExprAux RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = op;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term SLASH factor 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   										ExprAux d = new ExprAux(Operator.DIV, op1,  op2, op1left);
										RESULT = d;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term ASTERISK factor 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										   ExprAux m = new ExprAux(Operator.MULT, op1, op2, op1left);
										   RESULT = m;
										 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= factor 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // addition ::= addition MINUS term 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											  ExprAux sum = new ExprAux(Operator.MINUS, op1, op2, op1left);
											  RESULT = sum;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // addition ::= addition PLUS term 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											 ExprAux sum = new ExprAux(Operator.SUM, op1, op2, op1left);
											 RESULT = sum;
										   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // addition ::= term 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relation ::= addition 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparison ::= relation EQ relation 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.EQ, op1, op2, op1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparison ::= relation 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conjunction ::= conjunction AND comparison 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new ExprAux(Operator.AND, op1, op2, op1left);
												   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conjunction ::= comparison 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // disjunction ::= disjunction OR conjunction 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExprAux(Operator.OR, op1, op2, op1left);		
												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // disjunction ::= conjunction 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= disjunction 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // invariant ::= INVARIANT COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
													RESULT = f;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariant",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // invariantList ::= invariantList SEMICOLON invariant 
            {
              LinkedList<ExprAux> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> list = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux i = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																list.add(i);
																RESULT = list;
															 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariantList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // invariantList ::= invariant 
            {
              LinkedList<ExprAux> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux i = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								LinkedList<ExprAux> list = new LinkedList<ExprAux>();
								list.add(i);
								RESULT = list;
							  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariantList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // postcond ::= POST COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postcond",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // precond ::= PRE COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  f;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precond",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOL 
            {
              Type RESULT =null;
		 
					RESULT = Type.BOOL;
					//RESULT = new String("BOOL"); 
				   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Type RESULT =null;
		 
					RESULT =Type.INT;
					//RESULT = new String("INT"); 
				  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // varDecls ::= varDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if (list.contains(i))
										  		parser.report_error("Duplicated var declaration, line: "+ileft, i);	
										  	else{
												list.add(i);
                                          		RESULT = list;
											}
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecls",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       list.add(i);
                       RESULT = list; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecls",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= varDecls COLON type 
            {
              HashMap<String,Type> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											HashMap<String, Type> res = new HashMap<String, Type>();
											for (int i=0; i<listNames.size(); i++){
												if (res.containsKey(listNames.get(i)))
													parser.report_error("Duplicated var declaration, line: "+listNamesleft, listNames);	
												else
													res.put(listNames.get(i), t);
											}
											RESULT = res;
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declList ::= declList SEMICOLON decl 
            {
              HashMap<String,Type> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Type> list = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
													Set<String> keys = listD.keySet();
													Iterator<String> it = keys.iterator();
													
													while (it.hasNext()){
														String var = it.next();
														if (list.containsKey(var))
															parser.report_error("Duplicated var declaration, line: "+listleft, list);	
														else
															list.put(var, listD.get(var));
													}	
													RESULT = list;
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declList ::= decl 
            {
              HashMap<String,Type> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                            RESULT = listD;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initialCond ::= INIT COLON expr 
            {
              ExprAux RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux e = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e;  
								  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialCond",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actiondef ::= ACTION ID LPARENT RPARENT LBRACE precond SEMICOLON postcond SEMICOLON RBRACE 
            {
              ActionAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprAux pre = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux post = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
																													 ActionAux a= new ActionAux(name);		
																													 a.setPre(pre);
																													 a.setPost(post);																													 
			 																										 RESULT = a;	
																												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actiondef",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // actiondef ::= ACTION ID LPARENT RPARENT LBRACE FRAME COLON varDecls SEMICOLON precond SEMICOLON postcond SEMICOLON RBRACE 
            {
              ActionAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int frameListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int frameListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<String> frameList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprAux pre = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux post = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
																													 ActionAux a= new ActionAux(name);		
																													 a.setPre(pre);
																													 a.setPost(post);
																													 a.addAllFrame(frameList);
			 																										 RESULT = a;	
																												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actiondef",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actionlist ::= actionlist actiondef 
            {
              LinkedList<ActionAux> RESULT =null;
		int listAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ActionAux> listA = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionAux a = (ActionAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listA.add(a);
											  RESULT = listA;
										   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionlist",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // actionlist ::= actiondef 
            {
              LinkedList<ActionAux> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionAux a = (ActionAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ActionAux> res = new LinkedList<ActionAux>();
							 res.add(a);
							 RESULT = res;			 
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionlist",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bodyProcess ::= LBRACE initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 		   ProcessAux proc = new ProcessAux(initleft);
                                                                                                                                       proc.setInit(init);	
                                                                                                                                       //proc.setPre(pre);
																																	   //proc.setPost(post);
																																	   proc.addAllActions(aList);	
																																	   proc.addAllInvs(inv);						
                                                                                                                                       RESULT = proc;   
                                                                                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bodyProcess ::= LBRACE declList SEMICOLON initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 ProcessAux proc = new ProcessAux(listDleft);
																																					   proc.setInit(init);	
																																					   proc.addAllLocalVars(listD);
																																					   //proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= ID COLON type 
            {
              HashMap<String,Type> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  HashMap<String, Type> dec = new HashMap<String, Type>();
								   dec.put(name, t);
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramList ::= paramList COMMA param 
            {
              HashMap<String,Type> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Type> list = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> p = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                Set<String> keys = p.keySet();
												Iterator<String> it = keys.iterator();
												while(it.hasNext()){
													String par = it.next();
													list.put(par, p.get(par));
												}
												RESULT = list;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramList ::= param 
            {
              HashMap<String,Type> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> p = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = p;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // process ::= PROCESS ID bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  proc.setName(name);
                                                  RESULT = proc;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // process ::= PROCESS ID LPARENT paramList RPARENT bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Type> listP = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   proc.setName(name);
                                                                                                     //proc.setParamList(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // process ::= PROCESS ID LPARENT paramList RPARENT USES varDecls bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Type> listP = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 proc.setName(name);
                                                                                                     //proc.addAllLocalVars(listC);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // process ::= PROCESS ID USES varDecls bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    proc.setName(name);
																	//proc.addAllLocalVars(listC);
																	RESULT = proc;
																 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // processList ::= processList process 
            {
              LinkedList<ProcessAux> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> list = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux p = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.add(p);
                                               RESULT = list; 
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // processList ::= process 
            {
              LinkedList<ProcessAux> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux p = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                               LinkedList<ProcessAux> list = new LinkedList<ProcessAux>();
							   list.add(p);
							   RESULT = list;   
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // globalDecl ::= varDecls COLON type 
            {
              HashMap<String,Type> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				HashMap<String, Type> vars = new HashMap<String,Type>();	
														for (int i = 0; i < listNames.size(); i++){
														  	if (vars.containsKey(listNames.get(i))){ // if repeated var then error
																parser.report_error("Repeated var declaration, line:"+listNamesleft, listNames);
															}
															else{
																vars.put(listNames.get(i), t);
															}
														}
														RESULT = vars;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // globalVarList ::= globalVarList SEMICOLON globalDecl 
            {
              HashMap<String,Type> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Type> list = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																	//HashMap<String,String> d = new HashMap<String, String>(); 
																	
																	Set<String> keys = listD.keySet();
																	Iterator<String> it = keys.iterator();
																	while(it.hasNext()){
																		String elem = it.next();
																		if (list.containsKey(elem)){
																			parser.report_error("Repeated var declaration, line:"+listleft, list);
																		}
																		else{
																			list.put(elem, listD.get(elem));
																		}
																	}
																	RESULT = list;
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVarList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // globalVarList ::= globalDecl 
            {
              HashMap<String,Type> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = listD;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalVarList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specification ::= SPEC ID processList program 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> main = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	  SpecAux spec = new SpecAux(name);     
																											    	  spec.addAllProcesses(pList);																								  																 
																													  RESULT = spec;
                                                     			  											   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specification ::= SPEC ID globalVarList SEMICOLON processList program 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Type> varList = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> main = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SpecAux spec= new SpecAux(name);
																					spec.addAllSharedVars(varList);
																					spec.addAllProcesses(pList);
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= SPEC ID processList program PROPERTY COLON temporalFormula SEMICOLON 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,String> main = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  	  SpecAux spec = new SpecAux(name);
																											    	  spec.addAllProcesses(pList);
																													  spec.addInvariant(gf);																	 
																													  RESULT = spec;
                                                     			  											   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= SPEC ID globalVarList SEMICOLON processList program PROPERTY COLON expr SEMICOLON 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> varList = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,String> main = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SpecAux spec= new SpecAux(name);
																					spec.addAllSharedVars(varList);
																					spec.addAllProcesses(pList);
																					spec.addInvariant(gf);
																					Set<String> keys = main.keySet();
																					Iterator<String> it = keys.iterator();
																					while (it.hasNext()){
																						String current = it.next();
																						spec.addInstance(current, main.get(current));
																					}
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              SpecAux RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SpecAux prog = (SpecAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = prog; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainSpecification",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SpecAux start_val = (SpecAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

